{
  "permissions": {
    "allow": [
      "WebSearch",
      "Bash(npm install:*)",
      "WebFetch(domain:www.npmjs.com)",
      "Bash(cat:*)",
      "Bash(find:*)",
      "Bash(npm run build:*)",
      "Bash(TRANSCRIPTION_ENGINE=local tsx test-local-whisper.ts)",
      "Bash(npx tsx:*)",
      "Bash(npm search:*)",
      "WebFetch(domain:github.com)",
      "Bash(npm view:*)",
      "Bash(where vulkaninfo)",
      "Bash(vulkaninfo:*)",
      "Bash(npx tsc:*)",
      "Bash(npm run commands:clear:*)",
      "Bash(tee:*)",
      "Read(//tmp/**)",
      "Read(//Users/mcarmody/Documents/ac-mvp/src/app/api/recordings/[id]/**)",
      "Read(//Users/mcarmody/Documents/ac-mvp/src/app/api/webhooks/[id]/**)",
      "Read(//Users/mcarmody/Documents/ac-mvp/src/app/**)",
      "Read(//Users/mcarmody/Documents/ac-mvp/src/**)",
      "Read(//Users/mcarmody/Documents/ac-mvp/**)",
      "Bash(node -e \"\nconst track = {\n  metadata: {\n    userId: ''123'',\n    username: ''test'',\n    startTime: 1000,\n    endTime: 2000,\n    duration: 1000,\n    sampleRate: 48000,\n    channels: 2,\n    segmentIndex: 0\n  },\n  filePath: ''/path/to/file.wav'',\n  fileSize: 1024,\n  format: ''wav''\n};\n\nconsole.log(''Available fields:'');\nconsole.log(''metadata.startTime:'', track.metadata.startTime);\nconsole.log(''metadata.endTime:'', track.metadata.endTime);\nconsole.log(''metadata.duration:'', track.metadata.duration);\nconsole.log(''format:'', track.format);\n\")",
      "Bash(awk '{sum+=$5; if($5<min || min==0){min=$5} if($5>max){max=$5}} END {print \"\"\"\"Count:\"\"\"\", NR; print \"\"\"\"Total size:\"\"\"\", sum/1024/1024 \"\"\"\"MB\"\"\"\"; print \"\"\"\"Average:\"\"\"\", sum/NR/1024 \"\"\"\"KB\"\"\"\"; print \"\"\"\"Min:\"\"\"\", min/1024 \"\"\"\"KB\"\"\"\"; print \"\"\"\"Max:\"\"\"\", max/1024/1024 \"\"\"\"MB\"\"\"\"}')",
      "Bash(awk '{print $5}')",
      "Bash(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 /Users/mcarmody/Documents/ac-familiar/recordings/748ac0d4-f221-4950-8bba-5a2f6a67361e/Nysira_Em/segment_000.wav /Users/mcarmody/Documents/ac-familiar/recordings/748ac0d4-f221-4950-8bba-5a2f6a67361e/Nysira_Em/segment_001.wav /Users/mcarmody/Documents/ac-familiar/recordings/748ac0d4-f221-4950-8bba-5a2f6a67361e/Nysira_Em/segment_010.wav)",
      "Bash(awk '\nBEGIN {\n  bytes_per_sec = 48000 * 2 * 2  # 48kHz * 2 channels * 2 bytes (16-bit)\n  wav_header = 44  # Standard WAV header size\n}\n{\n  audio_bytes = $5 - wav_header\n  duration_sec = audio_bytes / bytes_per_sec\n  \n  if (duration_sec < 0.5) under_half++\n  else if (duration_sec < 1) under_one++\n  else if (duration_sec < 2) under_two++\n  else if (duration_sec < 5) under_five++\n  else over_five++\n  \n  total_duration += duration_sec\n  \n  # Track smallest durations\n  if (NR <= 20) {\n    smallest[NR] = sprintf(\"\"\"\"%.2fs (%s)\"\"\"\", duration_sec, $9)\n  }\n}\nEND {\n  print \"\"\"\"File count:\"\"\"\", NR\n  print \"\"\"\"Total audio duration:\"\"\"\", int(total_duration/60) \"\"\"\"min\"\"\"\", int(total_duration%60) \"\"\"\"sec\"\"\"\"\n  print \"\"\"\"Average duration per segment:\"\"\"\", sprintf(\"\"\"\"%.2f\"\"\"\", total_duration/NR) \"\"\"\"seconds\"\"\"\"\n  print \"\"\"\"\"\"\"\"\n  print \"\"\"\"Duration distribution:\"\"\"\"\n  print \"\"\"\"  < 0.5 sec:\"\"\"\", under_half\n  print \"\"\"\"  0.5-1 sec:\"\"\"\", under_one  \n  print \"\"\"\"  1-2 sec:\"\"\"\", under_two\n  print \"\"\"\"  2-5 sec:\"\"\"\", under_five\n  print \"\"\"\"  > 5 sec:\"\"\"\", over_five\n}')",
      "Bash(sort -k1n)",
      "Bash(node -e \"const m = require(''/Users/mcarmody/Documents/ac-familiar/recordings/748ac0d4-f221-4950-8bba-5a2f6a67361e/manifest.json''); const nysira = m.tracks.filter(t => t.metadata.username === ''Nysira''); console.log(''Nysira tracks in manifest:'', nysira.length); console.log(''Segment indices:'', nysira.map(t => t.metadata.segmentIndex).sort((a,b) => a-b).join('', ''));\")",
      "Read(//Users/mcarmody/Downloads/**)",
      "Bash(node reconstruct-nysira.js)",
      "Bash(node merge-transcripts.js)",
      "WebFetch(domain:claude.ai)"
    ],
    "deny": [],
    "ask": []
  }
}
